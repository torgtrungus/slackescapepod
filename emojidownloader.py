import requests
import os
import datetime
import time
from colorama import init, Fore, Back, Style
from tqdm import tqdm


# note: escapepod was written in 2022, (now 2024), so comments may no longer be accurate.



# ignore the next 2 lines
#import urllib.parse # if we have percent encoded token from a cookie (doesn't seem to work anymore)
#cookie_token_decoded = urllib.parse.unquote(cookie_token_encoded)



# token must be generated by creating an app within slack: https://api.slack.com/authentication/basics
# create a new slack app and then make a demo app. Change the app manifest (under features) to:
'''
display_information:
  name: icondownloader
  description: It downloads the custom icons, with only the scopes it needs
  background_color: "#d982b5"
features:
  app_home:
    home_tab_enabled: false
    messages_tab_enabled: true
    messages_tab_read_only_enabled: true
  bot_user:
    display_name: icondownloader
    always_online: true
oauth_config:
  scopes:
    bot:
      - emoji:read
      - channels:read
      - groups:read
      - mpim:read
      - im:read
settings:
  org_deploy_enabled: false
  socket_mode_enabled: false
  token_rotation_enabled: false
 '''
 # Then under settings, click Install App, Allow,
 # and now you have your token. Copy the token for use.
 # Note: If the app is removed, the token will no longer work for downloading custom emojis.

last_minute = -1
cur_minute = -1
cur_downloads = 0 # downloads this minute
downloads_per_minute = 200 # default 160: if you have a ton of custom emojis you can test your luck and change this
skip_count = 0


def download_emoji(emoji, url, output_dir, debug=False): # output_dir is the emoji dir

	filename = url.split('/')[-1] # get filename, which can be any garbled name
	extension = filename.split('.')[-1] # get extension

	new_filename = emoji + '.' + extension

	destination = os.path.join(output_dir, new_filename)
	relative_destination = '../.emojis/' + new_filename


	if os.path.exists(destination):
		if debug: print(new_filename + ' already exists, skipping...')
		global skip_count
		skip_count += 1
	else:
		global last_minute, cur_minute, cur_downloads, downloads_per_minute
		cur_minute = datetime.datetime.now().minute # current minute

		if cur_minute != last_minute: # the minute has changed
			last_minute = cur_minute
			cur_downloads = 0
		elif cur_downloads >= 60:
			print('download threshold hit, waiting...')
			while cur_minute == last_minute:
				time.sleep(1)
				cur_minute = datetime.datetime.now().minute
				print('...')

		# free to download now

		if os.path.exists(destination):
			if debug: print('emoji file already exists, skipping...')
		else:

			if debug: print('\tdownloading emoji: ' + url)
			response = requests.get(url)
			cur_downloads += 1

			try:
				if debug: print('...writing to ' + destination)
				open(destination, "wb").write(response.content)
			except FileExistsError: # shouldn't happen, but let's be safe and prevent a crash
				if debug: print('...file already exists. continuing...')

	return relative_destination

def download_emojis(token, output_dir, subdomain, debug=False, color=True): # todo: remove the default one here.

	r = requests.get(
		"https://" + subdomain + ".slack.com/api/emoji.list", # todo: need to make this flexible to whatever
		headers={"Authorization":"Bearer " + token}
		)

	if r.status_code != 200: 
		if color: print(Fore.RED)
		print('error! could not get emoji list from slack! response:')
		print('Status Code', r.status_code)
		print('JSON Response', r.json())
		print('skipping emoji download... (press Enter to continue)')
		if color: print(Style.RESET_ALL)
		input(a)
		return None
	else:
		# we got our emoji successfully
		print('successfully got emoji list')
		print(r.json())

		return_emoji_dict = {} # will house emoji names and relative url by the end



		# set up emoji directory if needed
		emoji_dir = os.path.join(output_dir, '.emojis')

		if os.path.exists(emoji_dir):
			if debug: print(emoji_dir + ' already exists.')
		else:
			os.mkdir(emoji_dir)
			if debug: print('created emoji directory.')

		emoji_dict = r.json()['emoji']

		aliases = [] # keep track of aliases here so once we've downloaded everything we can just reuse the relative url


		print('Downloading emojis...')
		pbar = tqdm(range(len(emoji_dict)), desc='Downloading Emojis', leave=False, position=0) # needs leave false for some reason or else it double prints the progress bar when returning

		for name, url in emoji_dict.items():



			if 'alias:' in url:
				alias = url.split(':')[1] # get the alias
				aliases.append((name, alias))
			else:
				if debug: print('\nfound emoji: ', name, ', downloading...')
				relative_emoji_url = download_emoji(name, url, emoji_dir)
				return_emoji_dict[name] = relative_emoji_url

			pbar.update(1)
			pbar.set_description(' ' + name)
			#time.sleep(.1)
		pbar.set_description(' ... emojis')
		print('')



		if len(aliases) > 0:
			print('found %d aliases. linking...' %(len(aliases)))
			for alias in aliases:
				name, alias = alias # unpack tuple
				if alias in return_emoji_dict:
					return_emoji_dict[name] = return_emoji_dict[alias]
				else:
					if color: print(Fore.RED, end='')
					print('error, could not find alias:' , alias, 'for emoji:', name)
					if color: print(Style.RESET_ALL, end='')
					return_emoji_dict[name] = '../.emojis/slack.png'


		global skip_count

		if color: print(Fore.YELLOW, end='')
		print('...skipped %d emoji downloads...' %(skip_count))
		if color: print(Style.RESET_ALL, end='')

		return return_emoji_dict


# note:
# https://github.com/iamcal/emoji-data
# has the mappings in:
# https://raw.githubusercontent.com/iamcal/emoji-data/master/emoji.json
# thanks to the responder at https://stackoverflow.com/questions/39490865/how-can-i-get-the-full-list-of-slack-emoji-through-api